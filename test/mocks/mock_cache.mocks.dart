// Mocks generated by Mockito 5.0.16 from annotations
// in possystem/test/mocks/mock_cache.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:possystem/services/cache.dart' as _i3;
import 'package:shared_preferences/shared_preferences.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSharedPreferences_0 extends _i1.Fake
    implements _i2.SharedPreferences {}

/// A class which mocks [Cache].
///
/// See the documentation for Mockito's code generation for more information.
class MockCache extends _i1.Mock implements _i3.Cache {
  MockCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SharedPreferences get service =>
      (super.noSuchMethod(Invocation.getter(#service),
          returnValue: _FakeSharedPreferences_0()) as _i2.SharedPreferences);
  @override
  set service(_i2.SharedPreferences? _service) =>
      super.noSuchMethod(Invocation.setter(#service, _service),
          returnValueForMissingStub: null);
  @override
  T? get<T>(String? name) =>
      (super.noSuchMethod(Invocation.method(#get, [name])) as T?);
  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<bool> set<T>(String? key, T? value) =>
      (super.noSuchMethod(Invocation.method(#set, [key, value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
