// Mocks generated by Mockito 5.1.0 from annotations
// in possystem/test/mocks/mock_database.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:possystem/services/database.dart' as _i3;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDatabase_0 extends _i1.Fake implements _i2.Database {}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i3.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Database get db => (super.noSuchMethod(Invocation.getter(#db),
      returnValue: _FakeDatabase_0()) as _i2.Database);
  @override
  set db(_i2.Database? _db) => super.noSuchMethod(Invocation.setter(#db, _db),
      returnValueForMissingStub: null);
  @override
  _i4.Future<List<Object?>> batchUpdate(
          String? table, List<Map<String, Object?>>? data,
          {String? where, List<List<Object>>? whereArgs}) =>
      (super.noSuchMethod(
              Invocation.method(#batchUpdate, [table, data],
                  {#where: where, #whereArgs: whereArgs}),
              returnValue: Future<List<Object?>>.value(<Object?>[]))
          as _i4.Future<List<Object?>>);
  @override
  _i4.Future<int?> count(String? table,
          {String? where, List<Object>? whereArgs}) =>
      (super.noSuchMethod(
          Invocation.method(
              #count, [table], {#where: where, #whereArgs: whereArgs}),
          returnValue: Future<int?>.value()) as _i4.Future<int?>);
  @override
  _i4.Future<void> delete(String? table, Object? id,
          {String? keyName = r'id'}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [table, id], {#keyName: keyName}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<Map<String, Object?>?> getLast(String? table,
          {String? orderByKey = r'id',
          List<String>? columns,
          String? where,
          List<Object?>? whereArgs,
          _i3.JoinQuery? join,
          int? count = 1}) =>
      (super.noSuchMethod(
              Invocation.method(#getLast, [
                table
              ], {
                #orderByKey: orderByKey,
                #columns: columns,
                #where: where,
                #whereArgs: whereArgs,
                #join: join,
                #count: count
              }),
              returnValue: Future<Map<String, Object?>?>.value())
          as _i4.Future<Map<String, Object?>?>);
  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<int> push(String? table, Map<String, Object?>? data) =>
      (super.noSuchMethod(Invocation.method(#push, [table, data]),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<List<Map<String, Object?>>> query(String? table,
          {String? where,
          List<Object?>? whereArgs,
          List<String>? columns,
          _i3.JoinQuery? join,
          String? groupBy,
          String? orderBy,
          int? limit,
          int? offset = 0}) =>
      (super.noSuchMethod(
              Invocation.method(#query, [
                table
              ], {
                #where: where,
                #whereArgs: whereArgs,
                #columns: columns,
                #join: join,
                #groupBy: groupBy,
                #orderBy: orderBy,
                #limit: limit,
                #offset: offset
              }),
              returnValue: Future<List<Map<String, Object?>>>.value(
                  <Map<String, Object?>>[]))
          as _i4.Future<List<Map<String, Object?>>>);
  @override
  _i4.Future<void> reset() => (super.noSuchMethod(Invocation.method(#reset, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<int> update(String? table, Object? key, Map<String, Object?>? data,
          {dynamic keyName = r'id'}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [table, key, data], {#keyName: keyName}),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
}
