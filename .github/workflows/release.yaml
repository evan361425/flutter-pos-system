name: Draft Github Release

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  check-version:
    name: Check pubspec.yaml version with tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Load pubspec version
        id: pubspec
        uses: CumulusDS/get-yaml-paths-action@v0.1.0
        with:
          file: pubspec.yaml
          version: version

      - name: Extract tag name
        run: echo "RELEASE_VERSION=$(echo ${${GITHUB_REF#refs/*/v}%-*})" >> $GITHUB_ENV

      - name: Extract version name
        run: |
          export PUBSPEC_VERSION=${{steps.pubspec.outputs.version}}
          echo "PUBSPEC_VERSION=$(echo ${PUBSPEC_VERSION%+*})" >> $GITHUB_ENV

      - name: Check with tag
        if: ${{ env.RELEASE_VERSION != env.PUBSPEC_VERSION }}
        run: exit 1

  draft-release:
    name: Draft Github release
    runs-on: ubuntu-20.04
    needs: check-version
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Extract tag name
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Draft release with changelog
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: POS System ${{ env.RELEASE_VERSION }}
          body: ${{ steps.build_changelog.outputs.changelog }}
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-asset:
    name: Create Android build
    runs-on: ubuntu-20.04
    needs: draft-release
    steps:
      - name: Get flavor
        id: flavor
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            const version = context.payload.ref.replace(/\/refs\/tags\/v/, '');

            return version.includes('-rc') ? 'dev' : 'prod';

        # Setup Java environment in order to build the Android app.
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"

      # Setup the flutter environment.
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      # Checkout code.
      - name: Checkout code
        uses: actions/checkout@v2

      # Recreate missing files, and get packages.
      - name: Build dependencies
        run: |
          flutter pub get
          flutter pub run build_runner build

      - name: Configure Firebase
        run: |
          mkdir -p ${{ steps.flavor.outputs.result }}
          echo "$GOOGLE_SERVICES" > ${{ steps.flavor.outputs.result }}/google-services.json
        env:
          GOOGLE_SERVICES: ${{ steps.flavor.outputs.result == 'dev' && secrets.GOOGLE_SERVICES_DEV || secrets.GOOGLE_SERVICES_PROD }}
        working-directory: android/app/src

      - name: Configure Play Store
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: android

      # Build the application.
      - name: Start building
        run: |
          flutter build -v apk --release --flavor ${{ steps.flavor.outputs.result }}
          mv build/app/outputs/flutter-apk/app-${{ steps.flavor.outputs.result }}-release.apk \
            $GITHUB_WORKSPACE/pos_system.apk

      # Upload the build.
      - name: Add packaged build to release draft
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.draft-release.outputs.upload_url }}
          asset_path: ./pos_system.apk
          asset_name: pos_system.${{ steps.flavor.outputs.result }}.apk
          asset_content_type: application/vnd.android.package-archive
